<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Weather Lookup Tool</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .jumbotron {
            margin-bottom: 20px; /* Add some margin at the bottom */
        }
    </style>
</head>
<body>

<!-- Header -->
<header>
    <nav class="navbar navbar-expand bg-dark border-bottom border-body" data-bs-theme="dark">

        <div class="container">
            <a class="navbar-brand" href="/">Noah's Test</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
                <div class="navbar-nav">
                    <a class="nav-link active" aria-current="page" href="/">Home</a>
                    <a class="nav-link" href="/sql">SQL Database Viewer</a>
                    <a class="nav-link" href="/phone_logger">Phone Call Logger</a>
                    <a class="nav-link" href="/weather">Weather Lookup Tool</a>
                </div>
            </div>
        </div>
    </nav>
</header>

<!-- Full-width Jumbotron -->
<div class="jumbotron jumbotron-fluid bg-body-tertiary">

    <div class="container text-center py-5">
        <h1 class="display-4">Weather</h1>
        <p class="lead col-lg-8 mx-auto">
            This takes the basic jumbotron above and makes its background edge-to-edge with a <code>.container</code> inside to align content. Similar to above, it's been recreated with built-in grid and utility classes.
        </p>
    </div>
</div>

<!-- Main Content -->
<main class="container">

    <div class="mb-3">
        <form id="location_form" action="/weather_handle" method="post">
            <label for="formGroupExampleInput" class="form-label">Location</label>
            <input type="text" class="form-control" id="location_input_box" name="location_input_box" placeholder="Enter Zip Code or City/State:">
            <input class="btn btn-primary" type="submit" value="Submit" id="submit">
        </form>
    </div>
    <input class="btn btn-primary" type="button" value="Use current location" id="location_finder">
    <div id="autocomplete_results"></div> <!-- Display autocomplete results here -->





    <div class="b-example-divider"></div>

    <div class="container">
        <footer class="py-3 my-4">
            <ul class="nav justify-content-center border-bottom pb-3 mb-3">
                <li class="nav-item"><a href="/" class="nav-link px-2 text-body-secondary">Home</a></li>
                <li class="nav-item"><a href="https://github.com/NoahConder" class="nav-link px-2 text-body-secondary">GitHub</a></li>
            </ul>
            <p class="text-center text-body-secondary">Find more of my projects on GitHub!</p>
        </footer>
    </div>

    <div class="b-example-divider"></div>
</main>

<!-- Optional JavaScript -->
<!-- Bootstrap Bundle with Popper -->
<script src="/javascripts/location_puller.js"></script>
<script src="/javascripts/autocomplete.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous" defer></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.min.js" integrity="sha384-Rx+T1VzGupg4BHQYs2gCW9It+akI2MM/mndMCy36UVfodzcJcF0GGLxZIzObiEfa" crossorigin="anonymous" defer></script>

<script>
    // Function to fetch weather data and display it
    function fetchWeatherData(query) {
        const apiKey = 'f1cabbb0e1f9b185fd3b70cd8240f3b0';
        const apiUrl = `http://api.openweathermap.org/geo/1.0/direct?q=${query}&limit=5&appid=${apiKey}`;

        fetch(apiUrl)
            .then((response) => response.json())
            .then((data) => {
                const resultsDiv = document.getElementById('autocomplete_results');
                resultsDiv.innerHTML = '';

                // Create and append the weather data list items
                data.forEach((item) => {
                    const cityName = item.name;
                    const stateCode = item.state;
                    const countryCode = item.country;
                    const listItem = document.createElement('div');
                    listItem.textContent = `${cityName}, ${stateCode}, ${countryCode}`;
                    listItem.classList.add('autocomplete-item');
                    listItem.addEventListener('click', () => {
                        document.getElementById('location_input_box').value = listItem.textContent;
                        resultsDiv.innerHTML = ''; // Clear the results
                    });
                    resultsDiv.appendChild(listItem);
                });
            })
            .catch((error) => {
                console.error('Error:', error);
                // Handle errors here
            });
    }

    // Function to handle input in the location input box
    function handleInput(event) {
        const inputText = event.target.value;
        if (inputText.length >= 3) {
            fetchWeatherData(inputText);
        } else {
            // Clear the autocomplete results if input is less than 3 characters
            document.getElementById('autocomplete_results').innerHTML = '';
        }
    }

    // Attach event listener to the location input box
    document.getElementById('location_input_box').addEventListener('input', handleInput);
</script>

</body>
</html>

